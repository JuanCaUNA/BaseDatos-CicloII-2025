


CREATE OR REPLACE TRIGGER TRG_VALIDA_USUARIO_PLANILLA
BEFORE INSERT OR UPDATE ON ACS_DETALLE_PLANILLA
FOR EACH ROW
DECLARE
  v_aplica_a VARCHAR2(20);
  v_es_medico NUMBER;
  v_es_admin  NUMBER;
BEGIN
  SELECT tp.ATP_APLICA_A
    INTO v_aplica_a
    FROM ACS_PLANILLA p
    JOIN ACS_TIPO_PLANILLA tp ON tp.ATP_ID = p.ATP_ID
   WHERE p.APL_ID = :NEW.APL_ID;

  SELECT COUNT(*) INTO v_es_medico FROM ACS_MEDICO         WHERE AUS_ID = :NEW.AUS_ID;
  SELECT COUNT(*) INTO v_es_admin  FROM ACS_ADMINISTRATIVO WHERE AUS_ID = :NEW.AUS_ID;

  IF v_aplica_a = 'MEDICO' THEN
    IF v_es_medico = 0 THEN
      RAISE_APPLICATION_ERROR(-20001,'El usuario no está registrado como MÉDICO para esta planilla');
    END IF;
    :NEW.ADP_TIPO_PERSONA := 'MEDICO';
  ELSIF v_aplica_a = 'ADMINISTRATIVO' THEN
    IF v_es_admin = 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'El usuario no está registrado como ADMINISTRATIVO para esta planilla');
    END IF;
    :NEW.ADP_TIPO_PERSONA := 'ADMINISTRATIVO';
  ELSE
    IF (v_es_medico + v_es_admin) = 0 THEN
      RAISE_APPLICATION_ERROR(-20003,'El usuario no está registrado ni como MÉDICO ni como ADMINISTRATIVO');
    END IF;
    IF :NEW.ADP_TIPO_PERSONA IS NULL THEN
      :NEW.ADP_TIPO_PERSONA := CASE WHEN v_es_medico=1 THEN 'MEDICO' ELSE 'ADMINISTRATIVO' END;
    END IF;
  END IF;
END;
/


CREATE OR REPLACE TRIGGER TRG_VALIDA_MOVIMIENTO_APLICA_A
BEFORE INSERT OR UPDATE ON ACS_MOVIMIENTO_PLANILLA
FOR EACH ROW
DECLARE
  v_tipo_persona  VARCHAR2(20);
  v_aplica_a_mov  VARCHAR2(20);
BEGIN
  SELECT ADP_TIPO_PERSONA INTO v_tipo_persona
  FROM ACS_DETALLE_PLANILLA
  WHERE ADP_ID = :NEW.ADP_ID;

  SELECT ATM_APLICA_A INTO v_aplica_a_mov
  FROM ACS_TIPO_MOVIMIENTO
  WHERE ATM_ID = :NEW.ATM_ID;

  IF v_aplica_a_mov <> 'AMBOS' AND v_aplica_a_mov <> v_tipo_persona THEN
    RAISE_APPLICATION_ERROR(-20004,'El movimiento no aplica al tipo de persona del detalle');
  END IF;
END;
/



CREATE OR REPLACE TRIGGER TRG_TURNO_PLANILLA_BI
BEFORE INSERT ON ACS_TURNO_PLANILLA
FOR EACH ROW
BEGIN
  :NEW.PROCESADO := 1;
  :NEW.PROCESADO_EN := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER TRG_PROC_PLANILLA_BI
BEFORE INSERT ON ACS_PROCEDIMIENTO_PLANILLA
FOR EACH ROW
BEGIN
  :NEW.PROCESADO := 1;
  :NEW.PROCESADO_EN := SYSTIMESTAMP;
END;
/


CREATE OR REPLACE TRIGGER TRG_ENVIO_COMPROBANTE_AI
AFTER INSERT ON ACS_ENVIO_COMPROBANTE
FOR EACH ROW
BEGIN
  UPDATE ACS_DETALLE_PLANILLA
     SET ADP_EMAIL_ENVIADO = 1,
         ADP_NOTIFICADO_EN = :NEW.AEC_FECHA
   WHERE ADP_ID = :NEW.ADP_ID;
END;
/



CREATE OR REPLACE TRIGGER TRG_MP_RECALC_MOV
FOR INSERT OR UPDATE OR DELETE ON ACS_MOVIMIENTO_PLANILLA
COMPOUND TRIGGER
  TYPE t_ids IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  g_adp_ids t_ids;

  PROCEDURE add_adp(p_adp NUMBER) IS
  BEGIN
    IF p_adp IS NOT NULL THEN
      g_adp_ids(g_adp_ids.COUNT+1) := p_adp;
    END IF;
  END;

  AFTER EACH ROW IS
  BEGIN
    add_adp(NVL(:NEW.ADP_ID,:OLD.ADP_ID));
  END AFTER EACH ROW;

  AFTER STATEMENT IS
    v_salario   NUMBER;
    v_ingresos  NUMBER;
    v_deducs    NUMBER;
    v_turnos    NUMBER;
    v_procs     NUMBER;
    v_bruto     NUMBER;
    v_neto      NUMBER;
    v_apl_id    NUMBER;
  BEGIN
    FOR i IN 1..g_adp_ids.COUNT LOOP
      SELECT NVL(SALARIO_BASE,0), APL_ID
        INTO v_salario, v_apl_id
        FROM ACS_DETALLE_PLANILLA
       WHERE ADP_ID = g_adp_ids(i);

      SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='INGRESO'   THEN mp.AMP_MONTO ELSE 0 END),0),
             NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='DEDUCCION' THEN mp.AMP_MONTO ELSE 0 END),0)
        INTO v_ingresos, v_deducs
        FROM ACS_MOVIMIENTO_PLANILLA mp
        JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID = mp.ATM_ID
       WHERE mp.ADP_ID = g_adp_ids(i);

      SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0)
        INTO v_turnos
        FROM ACS_TURNO_PLANILLA
       WHERE ADP_ID = g_adp_ids(i);

      SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0)
        INTO v_procs
        FROM ACS_PROCEDIMIENTO_PLANILLA
       WHERE ADP_ID = g_adp_ids(i);

      v_bruto := v_salario + v_ingresos + v_turnos + v_procs;
      v_neto  := v_bruto - v_deducs;

      UPDATE ACS_DETALLE_PLANILLA
         SET BRUTO = v_bruto,
             DEDUCCIONES = v_deducs,
             NETO = v_neto
       WHERE ADP_ID = g_adp_ids(i);

      UPDATE ACS_PLANILLA p
         SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id),
             APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id),
             APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id)
       WHERE p.APL_ID = v_apl_id;
    END LOOP;
    g_adp_ids.DELETE;
  END AFTER STATEMENT;
END;
/


CREATE OR REPLACE TRIGGER TRG_TURNO_RECALC
FOR INSERT OR UPDATE OR DELETE ON ACS_TURNO_PLANILLA
COMPOUND TRIGGER
  TYPE t_ids IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  g_adp_ids t_ids;

  PROCEDURE add_adp(p_adp NUMBER) IS
  BEGIN
    IF p_adp IS NOT NULL THEN
      g_adp_ids(g_adp_ids.COUNT+1) := p_adp;
    END IF;
  END;

  AFTER EACH ROW IS
  BEGIN
    add_adp(NVL(:NEW.ADP_ID,:OLD.ADP_ID));
  END AFTER EACH ROW;

  AFTER STATEMENT IS
    v_apl_id NUMBER;
  BEGIN
    FOR i IN 1..g_adp_ids.COUNT LOOP
      UPDATE ACS_DETALLE_PLANILLA d
         SET BRUTO = NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='INGRESO' THEN mp.AMP_MONTO ELSE 0 END),0)
                        FROM ACS_MOVIMIENTO_PLANILLA mp
                        JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID
                       WHERE mp.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA t WHERE t.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA p WHERE p.ADP_ID=d.ADP_ID),
             DEDUCCIONES = (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='DEDUCCION' THEN mp.AMP_MONTO ELSE 0 END),0)
                              FROM ACS_MOVIMIENTO_PLANILLA mp
                              JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID
                             WHERE mp.ADP_ID=d.ADP_ID),
             NETO = (NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='INGRESO' THEN mp.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA mp JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID WHERE mp.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA t WHERE t.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA p WHERE p.ADP_ID=d.ADP_ID))
                   - (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='DEDUCCION' THEN mp.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA mp JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID WHERE mp.ADP_ID=d.ADP_ID)
       WHERE d.ADP_ID = g_adp_ids(i);

      SELECT APL_ID INTO v_apl_id FROM ACS_DETALLE_PLANILLA WHERE ADP_ID = g_adp_ids(i);

      UPDATE ACS_PLANILLA p
         SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id),
             APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id),
             APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id)
       WHERE p.APL_ID = v_apl_id;
    END LOOP;
    g_adp_ids.DELETE;
  END AFTER STATEMENT;
END;
/


CREATE OR REPLACE TRIGGER TRG_PROC_RECALC
FOR INSERT OR UPDATE OR DELETE ON ACS_PROCEDIMIENTO_PLANILLA
COMPOUND TRIGGER
  TYPE t_ids IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  g_adp_ids t_ids;

  PROCEDURE add_adp(p_adp NUMBER) IS
  BEGIN
    IF p_adp IS NOT NULL THEN
      g_adp_ids(g_adp_ids.COUNT+1) := p_adp;
    END IF;
  END;

  AFTER EACH ROW IS
  BEGIN
    add_adp(NVL(:NEW.ADP_ID,:OLD.ADP_ID));
  END AFTER EACH ROW;

  AFTER STATEMENT IS
    v_apl_id NUMBER;
  BEGIN
    FOR i IN 1..g_adp_ids.COUNT LOOP
      UPDATE ACS_DETALLE_PLANILLA d
         SET BRUTO = NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='INGRESO' THEN mp.AMP_MONTO ELSE 0 END),0)
                        FROM ACS_MOVIMIENTO_PLANILLA mp
                        JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID
                       WHERE mp.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA t WHERE t.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA p WHERE p.ADP_ID=d.ADP_ID),
             DEDUCCIONES = (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='DEDUCCION' THEN mp.AMP_MONTO ELSE 0 END),0)
                              FROM ACS_MOVIMIENTO_PLANILLA mp
                              JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID
                             WHERE mp.ADP_ID=d.ADP_ID),
             NETO = (NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='INGRESO' THEN mp.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA mp JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID WHERE mp.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA t WHERE t.ADP_ID=d.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA p WHERE p.ADP_ID=d.ADP_ID))
                   - (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='DEDUCCION' THEN mp.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA mp JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID WHERE mp.ADP_ID=d.ADP_ID)
       WHERE d.ADP_ID = g_adp_ids(i);

      SELECT APL_ID INTO v_apl_id FROM ACS_DETALLE_PLANILLA WHERE ADP_ID = g_adp_ids(i);

      UPDATE ACS_PLANILLA p
         SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id),
             APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id),
             APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = v_apl_id)
       WHERE p.APL_ID = v_apl_id;
    END LOOP;
    g_adp_ids.DELETE;
  END AFTER STATEMENT;
END;
/


CREATE OR REPLACE TRIGGER TRG_DETALLE_SALARIO_AI
AFTER UPDATE OF SALARIO_BASE ON ACS_DETALLE_PLANILLA
FOR EACH ROW
BEGIN
  UPDATE ACS_DETALLE_PLANILLA d
     SET BRUTO = NVL(:NEW.SALARIO_BASE,0)
               + (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='INGRESO' THEN mp.AMP_MONTO ELSE 0 END),0)
                    FROM ACS_MOVIMIENTO_PLANILLA mp
                    JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID
                   WHERE mp.ADP_ID=d.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA t WHERE t.ADP_ID=d.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA p WHERE p.ADP_ID=d.ADP_ID),
         DEDUCCIONES = (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='DEDUCCION' THEN mp.AMP_MONTO ELSE 0 END),0)
                          FROM ACS_MOVIMIENTO_PLANILLA mp
                          JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID
                         WHERE mp.ADP_ID=d.ADP_ID),
         NETO = (NVL(:NEW.SALARIO_BASE,0)
               + (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='INGRESO' THEN mp.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA mp JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID WHERE mp.ADP_ID=d.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA t WHERE t.ADP_ID=d.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA p WHERE p.ADP_ID=d.ADP_ID))
               - (SELECT NVL(SUM(CASE WHEN tm.ATM_NATURALEZA='DEDUCCION' THEN mp.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA mp JOIN ACS_TIPO_MOVIMIENTO tm ON tm.ATM_ID=mp.ATM_ID WHERE mp.ADP_ID=d.ADP_ID)
   WHERE d.ADP_ID = :NEW.ADP_ID;

  UPDATE ACS_PLANILLA p
     SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = :NEW.APL_ID),
         APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = :NEW.APL_ID),
         APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA d WHERE d.APL_ID = :NEW.APL_ID)
   WHERE p.APL_ID = :NEW.APL_ID;
END;
/







