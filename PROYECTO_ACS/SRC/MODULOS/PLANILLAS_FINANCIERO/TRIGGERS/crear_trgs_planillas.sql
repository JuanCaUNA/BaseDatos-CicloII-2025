CREATE OR REPLACE TRIGGER TRG_VALIDA_USUARIO_PLANILLA
BEFORE INSERT OR UPDATE ON ACS_DETALLE_PLANILLA
FOR EACH ROW
DECLARE
  V_APLICA_A VARCHAR2(20);
  V_ES_MEDICO NUMBER;
  V_ES_ADMIN  NUMBER;
BEGIN
  SELECT TP.ATP_APLICA_A
    INTO V_APLICA_A
    FROM ACS_PLANILLA P
    JOIN ACS_TIPO_PLANILLA TP ON TP.ATP_ID = P.ATP_ID
   WHERE P.APL_ID = :NEW.APL_ID;

  SELECT COUNT(*) INTO V_ES_MEDICO FROM ACS_MEDICO         WHERE AUS_ID = :NEW.AUS_ID;
  SELECT COUNT(*) INTO V_ES_ADMIN  FROM ACS_ADMINISTRATIVO WHERE AUS_ID = :NEW.AUS_ID;

  IF V_APLICA_A = 'MEDICO' THEN
    IF V_ES_MEDICO = 0 THEN
      RAISE_APPLICATION_ERROR(-20001,'EL USUARIO NO ESTÁ REGISTRADO COMO MÉDICO PARA ESTA PLANILLA');
    END IF;
    :NEW.ADP_TIPO_PERSONA := 'MEDICO';
  ELSIF V_APLICA_A = 'ADMINISTRATIVO' THEN
    IF V_ES_ADMIN = 0 THEN
      RAISE_APPLICATION_ERROR(-20002,'EL USUARIO NO ESTÁ REGISTRADO COMO ADMINISTRATIVO PARA ESTA PLANILLA');
    END IF;
    :NEW.ADP_TIPO_PERSONA := 'ADMINISTRATIVO';
  ELSE
    IF (V_ES_MEDICO + V_ES_ADMIN) = 0 THEN
      RAISE_APPLICATION_ERROR(-20003,'EL USUARIO NO ESTÁ REGISTRADO NI COMO MÉDICO NI COMO ADMINISTRATIVO');
    END IF;
    IF :NEW.ADP_TIPO_PERSONA IS NULL THEN
      :NEW.ADP_TIPO_PERSONA := CASE WHEN V_ES_MEDICO=1 THEN 'MEDICO' ELSE 'ADMINISTRATIVO' END;
    END IF;
  END IF;
END;
/


CREATE OR REPLACE TRIGGER TRG_VALIDA_MOVIMIENTO_APLICA_A
BEFORE INSERT OR UPDATE ON ACS_MOVIMIENTO_PLANILLA
FOR EACH ROW
DECLARE
  V_TIPO_PERSONA  VARCHAR2(20);
  V_APLICA_A_MOV  VARCHAR2(20);
BEGIN
  SELECT ADP_TIPO_PERSONA INTO V_TIPO_PERSONA
  FROM ACS_DETALLE_PLANILLA
  WHERE ADP_ID = :NEW.ADP_ID;

  SELECT ATM_APLICA_A INTO V_APLICA_A_MOV
  FROM ACS_TIPO_MOVIMIENTO
  WHERE ATM_ID = :NEW.ATM_ID;

  IF V_APLICA_A_MOV <> 'AMBOS' AND V_APLICA_A_MOV <> V_TIPO_PERSONA THEN
    RAISE_APPLICATION_ERROR(-20004,'EL MOVIMIENTO NO APLICA AL TIPO DE PERSONA DEL DETALLE');
  END IF;
END;
/



CREATE OR REPLACE TRIGGER TRG_TURNO_PLANILLA_BI
BEFORE INSERT ON ACS_TURNO_PLANILLA
FOR EACH ROW
BEGIN
  :NEW.PROCESADO := 1;
  :NEW.PROCESADO_EN := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER TRG_PROC_PLANILLA_BI
BEFORE INSERT ON ACS_PROCEDIMIENTO_PLANILLA
FOR EACH ROW
BEGIN
  :NEW.PROCESADO := 1;
  :NEW.PROCESADO_EN := SYSTIMESTAMP;
END;
/


CREATE OR REPLACE TRIGGER TRG_ENVIO_COMPROBANTE_AI
AFTER INSERT ON ACS_ENVIO_COMP
FOR EACH ROW
BEGIN
  UPDATE ACS_DETALLE_PLANILLA
     SET ADP_EMAIL_ENVIADO = 1,
         ADP_NOTIFICADO_EN = :NEW.AEC_FECHA
   WHERE ADP_ID = :NEW.ADP_ID;
END;
/



CREATE OR REPLACE TRIGGER TRG_MP_RECALC_MOV
FOR INSERT OR UPDATE OR DELETE ON ACS_MOVIMIENTO_PLANILLA
COMPOUND TRIGGER
  TYPE T_IDS IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  G_ADP_IDS T_IDS;

  PROCEDURE ADD_ADP(P_ADP NUMBER) IS
  BEGIN
    IF P_ADP IS NOT NULL THEN
      G_ADP_IDS(G_ADP_IDS.COUNT+1) := P_ADP;
    END IF;
  END;

  AFTER EACH ROW IS
  BEGIN
    ADD_ADP(NVL(:NEW.ADP_ID,:OLD.ADP_ID));
  END AFTER EACH ROW;

  AFTER STATEMENT IS
    V_SALARIO   NUMBER;
    V_INGRESOS  NUMBER;
    V_DEDUCS    NUMBER;
    V_TURNOS    NUMBER;
    V_PROCS     NUMBER;
    V_BRUTO     NUMBER;
    V_NETO      NUMBER;
    V_APL_ID    NUMBER;
  BEGIN
    FOR I IN 1..G_ADP_IDS.COUNT LOOP
      SELECT NVL(SALARIO_BASE,0), APL_ID
        INTO V_SALARIO, V_APL_ID
        FROM ACS_DETALLE_PLANILLA
       WHERE ADP_ID = G_ADP_IDS(I);

      SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='INGRESO'   THEN MP.AMP_MONTO ELSE 0 END),0),
             NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='DEDUCCION' THEN MP.AMP_MONTO ELSE 0 END),0)
        INTO V_INGRESOS, V_DEDUCS
        FROM ACS_MOVIMIENTO_PLANILLA MP
        JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID = MP.ATM_ID
       WHERE MP.ADP_ID = G_ADP_IDS(I);

      SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0)
        INTO V_TURNOS
        FROM ACS_TURNO_PLANILLA
       WHERE ADP_ID = G_ADP_IDS(I);

      SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0)
        INTO V_PROCS
        FROM ACS_PROCEDIMIENTO_PLANILLA
       WHERE ADP_ID = G_ADP_IDS(I);

      V_BRUTO := V_SALARIO + V_INGRESOS + V_TURNOS + V_PROCS;
      V_NETO  := V_BRUTO - V_DEDUCS;

      UPDATE ACS_DETALLE_PLANILLA
         SET BRUTO = V_BRUTO,
             DEDUCCIONES = V_DEDUCS,
             NETO = V_NETO
       WHERE ADP_ID = G_ADP_IDS(I);

      UPDATE ACS_PLANILLA P
         SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID),
             APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID),
             APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID)
       WHERE P.APL_ID = V_APL_ID;
    END LOOP;
    G_ADP_IDS.DELETE;
  END AFTER STATEMENT;
END;
/


CREATE OR REPLACE TRIGGER TRG_TURNO_RECALC
FOR INSERT OR UPDATE OR DELETE ON ACS_TURNO_PLANILLA
COMPOUND TRIGGER
  TYPE T_IDS IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  G_ADP_IDS T_IDS;

  PROCEDURE ADD_ADP(P_ADP NUMBER) IS
  BEGIN
    IF P_ADP IS NOT NULL THEN
      G_ADP_IDS(G_ADP_IDS.COUNT+1) := P_ADP;
    END IF;
  END;

  AFTER EACH ROW IS
  BEGIN
    ADD_ADP(NVL(:NEW.ADP_ID,:OLD.ADP_ID));
  END AFTER EACH ROW;

  AFTER STATEMENT IS
    V_APL_ID NUMBER;
  BEGIN
    FOR I IN 1..G_ADP_IDS.COUNT LOOP
      UPDATE ACS_DETALLE_PLANILLA D
         SET BRUTO = NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='INGRESO' THEN MP.AMP_MONTO ELSE 0 END),0)
                        FROM ACS_MOVIMIENTO_PLANILLA MP
                        JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID
                       WHERE MP.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA T WHERE T.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA P WHERE P.ADP_ID=D.ADP_ID),
             DEDUCCIONES = (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='DEDUCCION' THEN MP.AMP_MONTO ELSE 0 END),0)
                              FROM ACS_MOVIMIENTO_PLANILLA MP
                              JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID
                             WHERE MP.ADP_ID=D.ADP_ID),
             NETO = (NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='INGRESO' THEN MP.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA MP JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID WHERE MP.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA T WHERE T.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA P WHERE P.ADP_ID=D.ADP_ID))
                   - (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='DEDUCCION' THEN MP.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA MP JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID WHERE MP.ADP_ID=D.ADP_ID)
       WHERE D.ADP_ID = G_ADP_IDS(I);

      SELECT APL_ID INTO V_APL_ID FROM ACS_DETALLE_PLANILLA WHERE ADP_ID = G_ADP_IDS(I);

      UPDATE ACS_PLANILLA P
         SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID),
             APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID),
             APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID)
       WHERE P.APL_ID = V_APL_ID;
    END LOOP;
    G_ADP_IDS.DELETE;
  END AFTER STATEMENT;
END;
/


CREATE OR REPLACE TRIGGER TRG_PROC_RECALC
FOR INSERT OR UPDATE OR DELETE ON ACS_PROCEDIMIENTO_PLANILLA
COMPOUND TRIGGER
  TYPE T_IDS IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  G_ADP_IDS T_IDS;

  PROCEDURE ADD_ADP(P_ADP NUMBER) IS
  BEGIN
    IF P_ADP IS NOT NULL THEN
      G_ADP_IDS(G_ADP_IDS.COUNT+1) := P_ADP;
    END IF;
  END;

  AFTER EACH ROW IS
  BEGIN
    ADD_ADP(NVL(:NEW.ADP_ID,:OLD.ADP_ID));
  END AFTER EACH ROW;

  AFTER STATEMENT IS
    V_APL_ID NUMBER;
  BEGIN
    FOR I IN 1..G_ADP_IDS.COUNT LOOP
      UPDATE ACS_DETALLE_PLANILLA D
         SET BRUTO = NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='INGRESO' THEN MP.AMP_MONTO ELSE 0 END),0)
                        FROM ACS_MOVIMIENTO_PLANILLA MP
                        JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID
                       WHERE MP.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA T WHERE T.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA P WHERE P.ADP_ID=D.ADP_ID),
             DEDUCCIONES = (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='DEDUCCION' THEN MP.AMP_MONTO ELSE 0 END),0)
                              FROM ACS_MOVIMIENTO_PLANILLA MP
                              JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID
                             WHERE MP.ADP_ID=D.ADP_ID),
             NETO = (NVL(SALARIO_BASE,0)
                   + (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='INGRESO' THEN MP.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA MP JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID WHERE MP.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA T WHERE T.ADP_ID=D.ADP_ID)
                   + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA P WHERE P.ADP_ID=D.ADP_ID))
                   - (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='DEDUCCION' THEN MP.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA MP JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID WHERE MP.ADP_ID=D.ADP_ID)
       WHERE D.ADP_ID = G_ADP_IDS(I);

      SELECT APL_ID INTO V_APL_ID FROM ACS_DETALLE_PLANILLA WHERE ADP_ID = G_ADP_IDS(I);

      UPDATE ACS_PLANILLA P
         SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID),
             APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID),
             APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = V_APL_ID)
       WHERE P.APL_ID = V_APL_ID;
    END LOOP;
    G_ADP_IDS.DELETE;
  END AFTER STATEMENT;
END;
/

CREATE OR REPLACE TRIGGER TRG_DETALLE_SALARIO_AI
AFTER UPDATE OF ADP_SALARIO_BASE ON ACS_DETALLE_PLANILLA
FOR EACH ROW
BEGIN
  UPDATE ACS_DETALLE_PLANILLA D
     SET ADP_BRUTO = NVL(:NEW.SALARIO_BASE,0)
               + (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='INGRESO' THEN MP.AMP_MONTO ELSE 0 END),0)
                    FROM ACS_MOVIMIENTO_PLANILLA MP
                    JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID
                   WHERE MP.ADP_ID=D.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA T WHERE T.ADP_ID=D.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA P WHERE P.ADP_ID=D.ADP_ID),
         ADP_DED = (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='DEDUCCION' THEN MP.AMP_MONTO ELSE 0 END),0)
                          FROM ACS_MOVIMIENTO_PLANILLA MP
                          JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID
                         WHERE MP.ADP_ID=D.ADP_ID),
         ADP_NETO = (NVL(:NEW.SALARIO_BASE,0)
               + (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='INGRESO' THEN MP.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA MP JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID WHERE MP.ADP_ID=D.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_TURNO_PLANILLA T WHERE T.ADP_ID=D.ADP_ID)
               + (SELECT NVL(SUM(MONTO_PAGADO_MEDICO),0) FROM ACS_PROCEDIMIENTO_PLANILLA P WHERE P.ADP_ID=D.ADP_ID))
               - (SELECT NVL(SUM(CASE WHEN TM.ATM_NATURALEZA='DEDUCCION' THEN MP.AMP_MONTO ELSE 0 END),0) FROM ACS_MOVIMIENTO_PLANILLA MP JOIN ACS_TIPO_MOVIMIENTO TM ON TM.ATM_ID=MP.ATM_ID WHERE MP.ADP_ID=D.ADP_ID)
   WHERE D.ADP_ID = :NEW.ADP_ID;

  UPDATE ACS_PLANILLA P
     SET APL_TOTAL_BRUTO       = (SELECT NVL(SUM(BRUTO),0)       FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = :NEW.APL_ID),
         APL_TOTAL_DEDUCCIONES = (SELECT NVL(SUM(DEDUCCIONES),0) FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = :NEW.APL_ID),
         APL_TOTAL_NETO        = (SELECT NVL(SUM(NETO),0)        FROM ACS_DETALLE_PLANILLA D WHERE D.APL_ID = :NEW.APL_ID)
   WHERE P.APL_ID = :NEW.APL_ID;
END;
/
